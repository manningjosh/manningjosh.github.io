4/150
w_survivors
sum(w_survivors$Freq)
men <- Titanic[which(Titanic$Class == "1st" & Titanic$Sex == "Male" & Titanic$Age == "Adult"),]
men
sum(men[which(men$Survived == "Yes"),]$Freq)
sum(men$Freq)
57/175
.325 * 100
survival_rate <- function(ticket_class){
women <- Titanic[which(Titanic$Class == ticket_class & Titanic$Sex == "Female" & Titanic$Age == "Adult"),]
w_survivors <- women[which(women$Survived == "Yes"),]
men <- Titanic[which(Titanic$Class == ticket_class & Titanic$Sex == "Male" & Titanic$Age == "Adult"),]
kids <- children[which(children$Class == ticket_class),]
k_survivors <- kids[which(kids$Survived == "Yes"),]
percent_w_c <- ((sum(w_survivors$Freq) + sum(k_survivors$Freq)) / (sum(women$Freq) + sum(kids$Freq))) * 100
percent_m <- (sum(men[which(men$Survived == "Yes"),]$Freq) / sum(men$Freq)) * 100
paste("Of", ticket_class, "class", percent_w_c, "% of women and children survived and", percent_m, "% of men survived.")
}
survival_rate("1st")
women
4/144
children
4/150
sum(w_survivors$Freq)
w_survivors$Freq
survival_rate <- function(ticket_class){
women <- Titanic[which(Titanic$Class == ticket_class & Titanic$Sex == "Female" & Titanic$Age == "Adult"),]
w_survivors <- women[which(women$Survived == "Yes"),]
men <- Titanic[which(Titanic$Class == ticket_class & Titanic$Sex == "Male" & Titanic$Age == "Adult"),]
kids <- children[which(children$Class == ticket_class),]
k_survivors <- kids[which(kids$Survived == "Yes"),]
percent_w_c <- (sum(w_survivors$Freq, k_survivors$Freq) / sum(women$Freq, kids$Freq)) * 100
percent_m <- (sum(men[which(men$Survived == "Yes"),]$Freq) / sum(men$Freq)) * 100
paste("Of", ticket_class, "class", percent_w_c, "% of women and children survived and", percent_m, "% of men survived.")
}
survival_rate("1st")
sum(w_survivors$Freq, 6)
kids <- children[which(children$Class == "1st"),]
k_survivors <- kids[which(kids$Survived == "Yes"),]
percent_w_c <- (sum(w_survivors$Freq, k_survivors$Freq) / sum(women$Freq, kids$Freq)) * 100
percent_w_c
sum(w_survivors$Freq, k_survivors$Freq)
sum(women$Freq, kids$Freq)
women
kids
146/150
survival_rate <- function(ticket_class){
women <- Titanic[which(Titanic$Class == ticket_class & Titanic$Sex == "Female" & Titanic$Age == "Adult"),]
w_survivors <- women[which(women$Survived == "Yes"),]
men <- Titanic[which(Titanic$Class == ticket_class & Titanic$Sex == "Male" & Titanic$Age == "Adult"),]
kids <- children[which(children$Class == ticket_class),]
k_survivors <- kids[which(kids$Survived == "Yes"),]
percent_w_c <- (sum(w_survivors$Freq, k_survivors$Freq) / sum(women$Freq, kids$Freq)) * 100
percent_m <- (sum(men[which(men$Survived == "Yes"),]$Freq) / sum(men$Freq)) * 100
paste("Of", ticket_class, "class", percent_w_c, "% of women and children survived and", percent_m, "% of men survived.")
}
survival_rate("1s")
survival_rate("1st")
survival_rate("Crew")
survival_rate <- function(ticket_class){
women <- Titanic[which(Titanic$Class == ticket_class & Titanic$Sex == "Female" & Titanic$Age == "Adult"),]
w_survivors <- women[which(women$Survived == "Yes"),]
men <- Titanic[which(Titanic$Class == ticket_class & Titanic$Sex == "Male" & Titanic$Age == "Adult"),]
kids <- children[which(children$Class == ticket_class),]
k_survivors <- kids[which(kids$Survived == "Yes"),]
percent_w_c <- round(sum(w_survivors$Freq, k_survivors$Freq), digits = 2) / round(sum(women$Freq, kids$Freq), digits = 2) * 100
percent_m <- (sum(men[which(men$Survived == "Yes"),]$Freq) / sum(men$Freq)) * 100
paste("Of", ticket_class, "class", percent_w_c, "% of women and children survived and", percent_m, "% of men survived.")
}
survival_rate("1st")
survival_rate <- function(ticket_class){
women <- Titanic[which(Titanic$Class == ticket_class & Titanic$Sex == "Female" & Titanic$Age == "Adult"),]
w_survivors <- women[which(women$Survived == "Yes"),]
men <- Titanic[which(Titanic$Class == ticket_class & Titanic$Sex == "Male" & Titanic$Age == "Adult"),]
kids <- children[which(children$Class == ticket_class),]
k_survivors <- kids[which(kids$Survived == "Yes"),]
percent_w_c <- round(sum(w_survivors$Freq, k_survivors$Freq) / sum(women$Freq, kids$Freq) * 100, digits = 2)
percent_m <- round(sum(men[which(men$Survived == "Yes"),]$Freq) / sum(men$Freq) * 100, digits = 2)
paste("Of", ticket_class, "class", percent_w_c, "% of women and children survived and", percent_m, "% of men survived.")
}
survival_rate("1st")
survival_rate <- function(ticket_class){
women <- Titanic[which(Titanic$Class == ticket_class & Titanic$Sex == "Female" & Titanic$Age == "Adult"),]
w_survivors <- women[which(women$Survived == "Yes"),]
men <- Titanic[which(Titanic$Class == ticket_class & Titanic$Sex == "Male" & Titanic$Age == "Adult"),]
kids <- children[which(children$Class == ticket_class),]
k_survivors <- kids[which(kids$Survived == "Yes"),]
percent_w_c <- paste(round(sum(w_survivors$Freq, k_survivors$Freq) / sum(women$Freq, kids$Freq) * 100, digits = 2), "%")
percent_m <- paste(round(sum(men[which(men$Survived == "Yes"),]$Freq) / sum(men$Freq) * 100, digits = 2), "%")
paste("Of", ticket_class, "class,", percent_w_c, "of women and children survived and", percent_m, "of men survived.")
}
survival_rate("1st")
survival_rate <- function(ticket_class){
women <- Titanic[which(Titanic$Class == ticket_class & Titanic$Sex == "Female" & Titanic$Age == "Adult"),]
w_survivors <- women[which(women$Survived == "Yes"),]
men <- Titanic[which(Titanic$Class == ticket_class & Titanic$Sex == "Male" & Titanic$Age == "Adult"),]
kids <- children[which(children$Class == ticket_class),]
k_survivors <- kids[which(kids$Survived == "Yes"),]
percent_w_c <- paste(round(sum(w_survivors$Freq, k_survivors$Freq) / sum(women$Freq, kids$Freq) * 100, digits = 2), "%", sep = "")
percent_m <- paste(round(sum(men[which(men$Survived == "Yes"),]$Freq) / sum(men$Freq) * 100, digits = 2), "%", sep = "")
paste("Of", ticket_class, "class,", percent_w_c, "of women and children survived and", percent_m, "of men survived.")
}
survival_rate("1st")
survival_rate("Crew")
survival_rate("1st")
survival_rate("2nd")
survival_rate("3rd")
life_expectancy <- read.csv(life-expectancy.csv)
life_expectancy <- read.csv("life-expectancy.csv")
ls
life_expectancy <- read.csv("life-expectancy.csv")
library(life-expectancy.csv)
read.csv("life-expectancy.csv")
life_expectancy <- read.csv("~/info201/a3-using-data-manningjosh/data/life-expectancy.csv")
life_expectancy <- read.csv("~/desktop/info201/a3-using-data-manningjosh/data/life-expectancy.csv")
life_expectancy
is.data.frame(life_expectancy)
View(life_expectancy)
life_expectancy$change <- life_expectancy$le_1960 - life_expectancy$le_2013
View(life_expectancy)
life_expectancy$change <- life_expectancy$le_2013 - life_expectancy$le_1960
most_improved <- life_expectancy[max(life_expectancy$change)]
most_improved <- life_expectancy[max(life_expectancy$change),]
most_improved
a <- "Chloe"
a
b <- "Josh"
b
a + b
c(a, b)
a <- 4
a
a <- "yes I love cheese!"
a
b <- 5
max(1, 2, 3)
round(4.56)
women
w_survivors
most_improved
most_improved <- life_expectancy[which(max(life_expectancy$change)),]
life_expectancy$change
max(life_expectancy$change)
life_expectancy$country[max(life_expectancy$change)]
life_expectancy[max(life_expectancy$change)]
life_expectancy$country[max(life_expectancy$change),]
life_expectancy[max(life_expectancy$change),]
which(max(life_expectancy$change))
which.max(life_expectancy$change)
most_improved <- life_expectancy$country[which.max(life_expectancy$change)]
most_improved
most_improved <- life_expectancy[[which.max(life_expectancy$change)]]
most_improved <- life_expectancy[which.max(life_expectancy$change)]
most_improved <- life_expectancy[which.max(life_expectancy$change),]
most_improved
most_improved <- life_expectancy$country[which.max(life_expectancy$change),]
most_improved <- life_expectancy$country[which.max(life_expectancy$change)]
most_improved
print(most_improved)
c(most_improved, "no")
life_expectancy$country[1]
life_expectancy[1]
life_expectancy$change < 5
any(life_expectancy$change < 5)
sum(life_expectancy$change < 5)
num_small_gain <- sum(life_expectancy$change < 5)
num_small_gain
life_expectancy["Latvia"]
life_expectancy[["Latvia"]]
life_expectancy$country["Latvia"]
which(life_expectancy$country == "Latvia")
CountryChange <- function(country){
life_expectancy$change[which(life_expectancy$country == country)]
}
CountryChange("Latvia")
CountryChange("Morocco")
sweden_change <- CountryChange("Sweden")
sweden_change
LowestLifeExpInRegion <- function(region) {
life_expectancy$region[which.min(life_expectancy$country)]
}
LowestLifeExpInRegion("North America")
LowestLifeExpInRegion <- function(region) {
life_expectancy$country[which.min(life_expectancy$region == region)]
}
LowestLifeExpInRegion("North America")
subset <- life_expectancy$region == region
subset <- life_expectancy$region == "North America"
subset
subset <- which(life_expectancy$region == "North America")
subset
LowestLifeExpInRegion <- function(region) {
subset <- which(life_expectancy$region == region)
life_expectancy$country[which.min(subset$le_2013)]
}
LowestLifeExpInRegion("North America")
subset <- life_expectancy$region[which(life_expectancy$region == "North America")]
subset
subset <- life_expectancy$country[which(life_expectancy$region == "North America")]
subset
subset <- life_expectancy[which(life_expectancy$region == "North America")]
LowestLifeExpInRegion <- function(region) {
subset <- life_expectancy$country[which(life_expectancy$region == region)]
life_expectancy$country[which.min(subset$le_2013)]
}
LowestLifeExpInRegion("North America")
life_expectancy[1]
life_expectancy[[1]]
LowestLifeExpInRegion <- function(region) {
subset <- life_expectancy[which(life_expectancy$region == region),]
life_expectancy$country[which.min(subset$le_2013)]
}
LowestLifeExpInRegion("North America")
subset <- life_expectancy[which(life_expectancy$region == "North America"),]
subset
LowestLifeExpInRegion <- function(region) {
subset <- life_expectancy[which(life_expectancy$region == region),]
subset$country[which.min(subset$le_2013)]
}
LowestLifeExpInRegion("North America")
LowestLifeExpInRegion("South Asia")
LowestLifeExpInRegion("Latin America & Caribbean")
lowest_in_south_asia <- LowestLifeExpInRegion("South Asia")
lowest_in_south_asia
winner <- life_expectancy$country[which.max(CountryChange("China"), CountryChange("Bolivia")),]
winner <- max(CountryChange("China"), CountryChange("Bolivia"))
winner
winner <- life_expectancy$country[max(CountryChange("China"), CountryChange("Bolivia"))]
winner
winner <- life_expectancy$country[which(max(CountryChange("China"), CountryChange("Bolivia"))),]
winner <- life_expectancy$country[which.max(CountryChange("China"), CountryChange("Bolivia"))]
subset <- life_expectancy[which(life_expectancy$country == "China" | life_expectancy$country == "Bolivia")]
subset <- life_expectancy[which(life_expectancy$country == "China" | life_expectancy$country == "Bolivia"),]
subset
winner <- which.max(subset$change)
winner
subset(winner)
subset[winner]
subset$country[winner]
winner <- subset$country[which.max(subset$change)]
winner
winner <- subset$country[which.max(subset$change),]
winner <- subset$country[which.max(subset$change)]
subset <- life_expectancy[which(life_expectancy$country == country1 | life_expectancy$country == country2),]
winner <- subset$country[which.max(subset$change)]
loser <- subset$country[which.min(subset$change)]
difference <- CountryChange(winner) - CountryChange(loser)
winner
loser
difference
BiggerChange <- function(country1, country2) {
subset <- life_expectancy[which(life_expectancy$country == country1 | life_expectancy$country == country2),]
winner <- subset$country[which.max(subset$change)]
loser <- subset$country[which.min(subset$change)]
difference <- CountryChange(winner) - CountryChange(loser)
paste("The country with the bigger change in life expectancy was", winner, "(gain=",round(CountryChange(winner), digits = 1), "),
whose life expectancy grew by", round(difference, digits = 1), "years more than", loser, "'s (gain=", round(CountryChange(loser), digits = 1), ").")
}
BiggerChange("China", "Bolivia")
BiggerChange <- function(country1, country2) {
subset <- life_expectancy[which(life_expectancy$country == country1 | life_expectancy$country == country2),]
winner <- subset$country[which.max(subset$change)]
loser <- subset$country[which.min(subset$change)]
difference <- CountryChange(winner) - CountryChange(loser)
paste("The country with the bigger change in life expectancy was", winner, "(gain=",round(CountryChange(winner), digits = 1), "), whose life expectancy grew by", round(difference, digits = 1), "years more than", loser, "'s (gain=", round(CountryChange(loser), digits = 1), ").")
}
BiggerChange("China", "Bolivia")
BiggerChange <- function(country1, country2) {
subset <- life_expectancy[which(life_expectancy$country == country1 | life_expectancy$country == country2),]
winner <- subset$country[which.max(subset$change)]
loser <- subset$country[which.min(subset$change)]
difference <- CountryChange(winner) - CountryChange(loser)
paste("The country with the bigger change in life expectancy was", winner, "(gain=",round(CountryChange(winner), digits = 1), "), whose life expectancy grew by", round(difference, digits = 1), "years more than", loser, "'s (gain=", round(CountryChange(loser), digits = 1), ").", sep = "")
}
BiggerChange("China", "Bolivia")
BiggerChange <- function(country1, country2) {
subset <- life_expectancy[which(life_expectancy$country == country1 | life_expectancy$country == country2),]
winner <- subset$country[which.max(subset$change)]
loser <- subset$country[which.min(subset$change)]
difference <- CountryChange(winner) - CountryChange(loser)
paste("The country with the bigger change in life expectancy was ", winner, " (gain=",round(CountryChange(winner), digits = 1), "), whose life expectancy grew by ", round(difference, digits = 1), " years more than ", loser, "'s (gain=", round(CountryChange(loser), digits = 1), ").", sep = )
}
BiggerChange("China", Bolivia)
BiggerChange("China", "Bolivia")
BiggerChange <- function(country1, country2) {
subset <- life_expectancy[which(life_expectancy$country == country1 | life_expectancy$country == country2),]
winner <- subset$country[which.max(subset$change)]
loser <- subset$country[which.min(subset$change)]
difference <- CountryChange(winner) - CountryChange(loser)
paste("The country with the bigger change in life expectancy was ", winner, " (gain=",round(CountryChange(winner), digits = 1), "), whose life expectancy grew by ", round(difference, digits = 1), " years more than ", loser, "'s (gain=", round(CountryChange(loser), digits = 1), ").", sep = "")
}
BiggerChange("China", "Bolivia")
BiggerChange <- function(country1, country2) {
subset <- life_expectancy[which(life_expectancy$country == country1 | life_expectancy$country == country2),]
winner <- subset$country[which.max(subset$change)]
loser <- subset$country[which.min(subset$change)]
difference <- CountryChange(winner) - CountryChange(loser)
paste("The country with the bigger change in life expectancy was ", winner, " (gain=",round(CountryChange(winner), digits = 1),
"), whose life expectancy grew by ", round(difference, digits = 1), " years more than ", loser, "'s (gain=", round(CountryChange(loser), digits = 1), ").", sep = "")
}
BiggerChange("China", "Bolivia")
BiggerChange("China", "United States")
usa_or_france <- BiggerChange("United States", "France")
usa_or_france
write.csv(life_expectancy, file = "life_expectancy-with-change.csv", row.names = FALSE)
write.csv(life_expectancy, file = "life_expectancy-with-change.csv", row.names = FALSE)
pwd
most_lost <- Titanic[which.max(Titanic$Freq)]
most_lost <- Titanic[which.max(Titanic$Freq),]
which(Titanic$Class == ticket_class & Titanic$Sex == "Female" & Titanic$Age == "Adult")
Titanic[which(Titanic$Class == ticket_class & Titanic$Sex == "Female" & Titanic$Age == "Adult"),]
Titanic[which(Titanic$Class == "1st" & Titanic$Sex == "Female" & Titanic$Age == "Adult"),]
most_improved <- life_expectancy$country[which.max(life_expectancy$change)]
write.csv(life_expectancy, file = "c:\\desktop\\info201\\a3-using-data-manningjosh\\data\\life_expectancy-with-change.csv", row.names = FALSE)
write.csv(life_expectancy, file = "~/desktop/info201/a3-using-data-manningjosh/data/life_expectancy-with-change.csv", row.names = FALSE)
write.csv(life_expectancy, file = "~/a3-using-data-manningjosh/data/life_expectancy-with-change.csv", row.names = FALSE)
write.csv(life_expectancy, file = "~/info201/a3-using-data-manningjosh/data/life_expectancy-with-change.csv", row.names = FALSE)
write.csv(life_expectancy, file = "~/desktop/info201/a3-using-data-manningjosh/data/life_expectancy-with-change.csv", row.names = FALSE)
life_expectancy$region
life_expectancy[which(life_expectancy$region = "Latin America & Caribbean"),]
life_expectancy[which(life_expectancy$region = "Latin America & Caribbean"),]
life_expectancy[which(life_expectancy$region == "Latin America & Caribbean"),]
Latin_America <- life_expectancy[which(life_expectancy$region == "Latin America & Caribbean"),]
which.max(Latin_America$change)
Latin_America
Latin_America$change
length(Latin_America)
length(Latin_America$change)
Latin_America_average <- sum(Latin_America$change) / length(Latin_America$change)
Latin_America_average
life_expectancy$region
unique(life_expectancy$region)
regions <- unique(life_expectancy$region)
get_average_for_region <- function(region){
subset <- life_expectancy[which(life_expectancy$region == region),]
sum(subset) / length(subset)
}
list_of_averages <- lapply(regions, get_average_for_region)
regions <- unique(life_expectancy$region)
regions
get_average_for_region <- function(region){
subset <- life_expectancy[which(life_expectancy$region == region),]
sum(subset) / length(subset)
}
get_average_for_region("South Asia")
get_average_for_region <- function(region){
subset <- life_expectancy$region[which(life_expectancy$region == region),]
sum(subset) / length(subset)
}
get_average_for_region("South Asia")
life_expectancy$region[which(life_expectancy$region == region),]
life_expectancy$region[which(life_expectancy$region == "South Asia"),]
life_expectancy$region[which(life_expectancy$region == "South Asia")]
life_expectancy[which(life_expectancy$region == "South Asia")]
life_expectancy[which(life_expectancy$region == "South Asia"),]
get_average_for_region <- function(region){
subset <- life_expectancy[which(life_expectancy$region == region),]
sum(subset$change) / length(subset$change)
}
get_average_for_region("South Asia")
regions <- unique(life_expectancy$region)
get_average_for_region <- function(region){
subset <- life_expectancy[which(life_expectancy$region == region),]
sum(subset$change) / length(subset$change)
}
list_of_averages <- lapply(regions, get_average_for_region)
list_of_averages
regions
which.max(list_of_averages)
regions <- unique(life_expectancy$region)
get_average_for_region <- function(region){
subset <- life_expectancy[which(life_expectancy$region == region),]
sum(subset$change) / length(subset$change)
}
list_of_averages <- lapply(regions, get_average_for_region)
highest_average_change <- regions[which.max(list_of_averages)]
highest_average_change
source('~/Desktop/Info201/ch11-apis/exercise-5/exercise.R', echo=TRUE)
source('~/Desktop/Info201/ch11-apis/exercise-5/exercise.R', echo=TRUE)
install.packages("jsonlite")
# Flatten the data stored in the `$results` key of the data returned to you
results <- fromJSON(body)
# Return a list of the three pieces of information from above
info <- list(headline=headline, summary=short_summary, link=link)
source('~/Desktop/Info201/ch11-apis/exercise-5/exercise.R', echo=TRUE)
GetReview("Incredibles 2")
api_key <- "7dc479093ec34f4ebb1f24ceae5913b0"
# Write a function that allows you to specify a movie, that does the following:
GetReview <- function(movie) {
movie <- "Baby Driver"
# Construct a search query using YOUR api key
# The base URL is https://api.nytimes.com/svc/movies/v2/reviews/search.json?
# Your parameters should include a "query" and an "api_key"
# Note: the HTTR library will take care of spaces in the arguments
# See the interactive console for more detail:https://developer.nytimes.com/movie_reviews_v2.json#/Console/GET/reviews/search.json
# Request data using your search query
base_uri <- "https://api.nytimes.com/svc/movies/v2/reviews/search.json?"
query_params <- list(query=movie, api_key=api_key)
response <- GET(base_uri, query=query_params)
body <- content(response, "text")
# What type of variable does this return?
typeof(body)
# Flatten the data stored in the `$results` key of the data returned to you
results <- fromJSON(body)
flattened <- flatten(results$results)
# From the most recent review, store the headline, short summary, and link to full article each in their own variables
headline <- flattened$headline
short_summary <- flattened$summary_short
link <- flattened$link.url
# Return a list of the three pieces of information from above
info <- list(headline=headline, summary=short_summary, link=link)
}
GetReview("Incredibles 2")
GetReview <- function(movie) {
movie <- "Baby Driver"
# Construct a search query using YOUR api key
# The base URL is https://api.nytimes.com/svc/movies/v2/reviews/search.json?
# Your parameters should include a "query" and an "api_key"
# Note: the HTTR library will take care of spaces in the arguments
# See the interactive console for more detail:https://developer.nytimes.com/movie_reviews_v2.json#/Console/GET/reviews/search.json
# Request data using your search query
base_uri <- "https://api.nytimes.com/svc/movies/v2/reviews/search.json?"
query_params <- list(query=movie, api_key=api_key)
response <- GET(base_uri, query=query_params)
body <- content(response, "text")
# What type of variable does this return?
typeof(body)
# Flatten the data stored in the `$results` key of the data returned to you
results <- fromJSON(body)
flattened <- flatten(results$results)
# From the most recent review, store the headline, short summary, and link to full article each in their own variables
headline <- flattened$headline
short_summary <- flattened$summary_short
link <- flattened$link.url
# Return a list of the three pieces of information from above
info <- list(headline=headline, summary=short_summary, link=link)
info
}
GetReview("Incredibles 2")
GetReview <- function(movie) {
# Construct a search query using YOUR api key
# The base URL is https://api.nytimes.com/svc/movies/v2/reviews/search.json?
# Your parameters should include a "query" and an "api_key"
# Note: the HTTR library will take care of spaces in the arguments
# See the interactive console for more detail:https://developer.nytimes.com/movie_reviews_v2.json#/Console/GET/reviews/search.json
# Request data using your search query
base_uri <- "https://api.nytimes.com/svc/movies/v2/reviews/search.json?"
query_params <- list(query=movie, api_key=api_key)
response <- GET(base_uri, query=query_params)
body <- content(response, "text")
# What type of variable does this return?
typeof(body)
# Flatten the data stored in the `$results` key of the data returned to you
results <- fromJSON(body)
flattened <- flatten(results$results)
# From the most recent review, store the headline, short summary, and link to full article each in their own variables
headline <- flattened$headline
short_summary <- flattened$summary_short
link <- flattened$link.url
# Return a list of the three pieces of information from above
info <- list(headline=headline, summary=short_summary, link=link)
info
}
GetReview("Incredibles 2")
# Request data using your search query
base_uri <- "https://api.nytimes.com/svc/movies/v2/reviews/search.json?"
query_params <- list(query=movie, api_key=api_key)
movie <- 'Baby Driver'
response <- GET(base_uri, query=query_params)
body <- content(response, "text")
movie <- 'Baby Driver'
# Request data using your search query
base_uri <- "https://api.nytimes.com/svc/movies/v2/reviews/search.json?"
query_params <- list(query=movie, api_key=api_key)
query_params
response <- GET(base_uri, query=query_params)
body <- content(response, "text")
body
pwd
## load API keys
source("_keys.R_")
source("_keys.R_")
View(tiny_data)
library(ggplot2)
View(middle_data)
View(tiny_data)
tiny_data <- read.csv("temp_prec_tiny.csv.bz2", sep = "/t")
getwd()
setwd("~/desktop/info201/a6-server-manningjosh")
setwd("~/desktop/info201/a6-server-manningjosh/server_data")
getwd()
tiny_data <- read.csv("temp_prec_tiny.csv.bz2", sep = "/t")
tiny_data <- read.csv("temp_prec_tiny.csv.bz2")
View(tiny_data)
tiny_data <- read.csv("temp_prec_tiny.csv.bz2", sep = ".")
tiny_data <- data.table("temp_prec_tiny.csv.bz2", sep = ".")
library(data.table)
tiny_data <- data.table("temp_prec_tiny.csv.bz2", sep = ".")
View(tiny_data)
tiny_data <- data.table(read.csv("temp_prec_tiny.csv.bz2"), sep = "/t")
View(tiny_data)
tiny_data <- data.table(read.csv("temp_prec_tiny.csv.bz2"))
View(tiny_data)
tiny_data <- data.table(read.csv("temp_prec_tiny.csv.bz2", sep = "/t"))
tiny_data <- data.table(read.csv("temp_prec_tiny.csv.bz2", sep = /t))
tiny_data <- data.table(read.csv("temp_prec_tiny.csv.bz2", sep = "."))
tiny_data <- data.table(read.csv("temp_prec_tiny.csv.bz2", sep = " "))
View(tiny_data)
install.packages("mapproj")
library(mapproj)
startsWith
